#This workflow use Git Flow for deploying the application. Please see: https://github.com/Iberia-Ent/software-engineering--git-flow-template for more information.
name: CICD_JAVA_MAVEN

on:  
  push:  
    branches-ignore: [ main, develop, staging ]    
  pull_request:  
    branches: [ develop, staging ]
    types:  [ opened, reopened, closed ]
  release:
    types:
      - created

jobs:
  Init:
    name: Set up variables
    runs-on: ubuntu-latest    
    outputs:
      ENVIRONMENT_NAME: ${{ env.ENVIRONMENT_NAME }}
      AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
      AWS_CODEARTIFACT_DOMAIN: ${{ env.AWS_CODEARTIFACT_DOMAIN }}
      AWS_REGION: ${{ env.AWS_REGION }}
      ARTIFACT_REPOSITORY_CENTRAL_NAME: ${{ env.ARTIFACT_REPOSITORY_CENTRAL_NAME }}
      ARTIFACT_REPOSITORY_CENTRAL_URL: ${{ env.ARTIFACT_REPOSITORY_CENTRAL_URL }}
      LIBRARY_ARTIFACT_REPOSITORY_NAME: ${{ env.LIBRARY_ARTIFACT_REPOSITORY_NAME }}
      LIBRARY_ARTIFACT_REPOSITORY_URL: ${{ env.LIBRARY_ARTIFACT_REPOSITORY_URL }}
      JAVA_JDK_VERSION: ${{ env.JAVA_JDK_VERSION }}
      JAVA_DISTRIBUTION: ${{ env.JAVA_DISTRIBUTION }}
      SUFIX_ARTIFACT_VERSION: ${{ env.SUFIX_ARTIFACT_VERSION }}
      DEPLOYMENT_GROUP_NAME: ${{ env.DEPLOYMENT_GROUP_NAME }}
      DEPLOYMENT_CONFIG_NAME: ${{ env.DEPLOYMENT_CONFIG_NAME }}
      DEPLOYMENT_URL: ${{ env.DEPLOYMENT_URL }}
      BUCKET_REPOSITORY: ${{ env.BUCKET_REPOSITORY }}
      
    steps:
    - uses: actions/checkout@v2
        
    - name: Set Up ci-config File
      run: |
        if [ ${{ github.event_name }} = pull_request ] && [ ${{ github.event.pull_request.merged }} ] && ( [ ${{ github.ref }} = develop ] ) || [ ${{ github.event_name }} = push ]
        then
            DATA_JSON_FILE=`jq -c '.dev' ci-config.json`      
            echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            echo DATA_JSON_FILE DEV: "$DATA_JSON_FILE"
            echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            ENVIRONMENT_NAME=Development
            echo ENVIRONMENT_NAME=Development >> $GITHUB_ENV
            echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        elif [ ${{ github.event_name }} = pull_request ] && [ ${{ github.head_ref }} = develop ] && ( ( [ ${{ github.event.action }} = opened ] || [ ${{ github.event.action }} = reopened ] ) && [ ${{ github.base_ref }} = staging ] ) || ( [ ${{ github.ref }} = staging ] && [ ${{ github.event.pull_request.merged }} ] )
        then
            DATA_JSON_FILE=`jq -c '.pre' ci-config.json`      
            echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            echo DATA_JSON_FILE PRE: "$DATA_JSON_FILE"
            echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            ENVIRONMENT_NAME=Preproduction
            echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        elif ( [[ ${{ github.ref }} == refs/tags/v* ]] || [[ ${{ github.ref }} == refs/tags/HOTFIX_* ]] && [ ${{ github.event_name }} = release ] )
        then
            DATA_JSON_FILE=`jq -c '.prod' ci-config.json`      
            echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            echo DATA_JSON_FILE PRO: "$DATA_JSON_FILE"
            echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            ENVIRONMENT_NAME=Production
            echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        fi
        
        echo ENVIRONMENT_NAME=$ENVIRONMENT_NAME >> $GITHUB_ENV
        echo ENVIRONMENT_NAME: "$ENVIRONMENT_NAME"
        if [ ! -z "$ENVIRONMENT_NAME" ]
        then
            echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            echo   SETUP PROPIERTIES OF THE ENVIRONMENT: $ENVIRONMENT_NAME and file:"$DATA_JSON_FILE"
            echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            echo AWS_ACCOUNT_ID=`jq -r '.AWS_ACCOUNT_ID' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo AWS_CODEARTIFACT_DOMAIN=`jq -r '.AWS_CODEARTIFACT_DOMAIN' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo ARTIFACT_REPOSITORY_CENTRAL_NAME=`jq -r '.ARTIFACT_REPOSITORY_CENTRAL_NAME' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo ARTIFACT_REPOSITORY_CENTRAL_URL=`jq -r '.ARTIFACT_REPOSITORY_CENTRAL_URL' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo LIBRARY_ARTIFACT_REPOSITORY_NAME=`jq -r '.LIBRARY_ARTIFACT_REPOSITORY_NAME' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo LIBRARY_ARTIFACT_REPOSITORY_URL=`jq -r '.LIBRARY_ARTIFACT_REPOSITORY_URL' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo AWS_REGION=`jq -r '.AWS_REGION' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo JAVA_JDK_VERSION=`jq -r '.JAVA_JDK_VERSION' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo JAVA_DISTRIBUTION=`jq -r '.JAVA_DISTRIBUTION' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo SUFIX_ARTIFACT_VERSION=`jq -r '.SUFIX_ARTIFACT_VERSION' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo DEPLOYMENT_GROUP_NAME=`jq -r '.DEPLOYMENT_GROUP_NAME' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo DEPLOYMENT_CONFIG_NAME=`jq -r '.DEPLOYMENT_CONFIG_NAME' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo DEPLOYMENT_URL=`jq -r '.DEPLOYMENT_URL' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo BUCKET_REPOSITORY=`jq -r '.BUCKET_REPOSITORY' <<< "$DATA_JSON_FILE"` >> $GITHUB_ENV
            echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        elif ( [ ${{ github.event.action }} = opened ] || [ ${{ github.event.action }} = reopened ] && [ ${{ github.base_ref }} = staging ] ) 
        then
            exit 1
        fi
        
    - name: Validating Variables
      if: ${{ env.ENVIRONMENT_NAME }}
      run: |
        if ( [ "${{ env.SUFIX_ARTIFACT_VERSION }}" = "" ] ) || ( [ "${{ env.SUFIX_ARTIFACT_VERSION }}" != "SNAPSHOT" ] && [ "${{ env.SUFIX_ARTIFACT_VERSION }}" != "RC" ] && [ "${{ env.SUFIX_ARTIFACT_VERSION }}" != "RELEASE" ] ) || ( [ "${{ env.ENVIRONMENT_NAME }}" = "Development" ] && [ "${{ env.SUFIX_ARTIFACT_VERSION }}" != "SNAPSHOT" ] ) || ( [ "${{ env.ENVIRONMENT_NAME }}" = "Preproduction" ] && [ "${{ env.SUFIX_ARTIFACT_VERSION }}" != "RC" ] ) || ( [ "${{ env.ENVIRONMENT_NAME }}" = "Production" ] && [ "${{ env.SUFIX_ARTIFACT_VERSION }}" != "RELEASE" ] )
        then
            echo "The variable SUFIX_ARTIFACT_VERSION located into ci-config.json is not valid, should be SNAPSHOT, RC or RELEASE"
            exit 1
        fi
        
  CI:
    name: Continous Integration
    needs: [Init]
    if: ${{ needs.Init.outputs.ENVIRONMENT_NAME }}
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.Init.outputs.ENVIRONMENT_NAME }}
    outputs:
      CODEARTIFACT_AUTH_TOKEN: ${{ env.CODEARTIFACT_AUTH_TOKEN }}
    env:
      AWS_ACCOUNT_ID: ${{ needs.Init.outputs.AWS_ACCOUNT_ID }}
      AWS_CODEARTIFACT_DOMAIN: ${{ needs.Init.outputs.AWS_CODEARTIFACT_DOMAIN }}
      ARTIFACT_REPOSITORY_CENTRAL_NAME: ${{ needs.Init.outputs.ARTIFACT_REPOSITORY_CENTRAL_NAME }}
      ARTIFACT_REPOSITORY_CENTRAL_URL: ${{ needs.Init.outputs.ARTIFACT_REPOSITORY_CENTRAL_URL }}
      LIBRARY_ARTIFACT_REPOSITORY_NAME: ${{ needs.Init.outputs.LIBRARY_ARTIFACT_REPOSITORY_NAME }}
      LIBRARY_ARTIFACT_REPOSITORY_URL: ${{ needs.Init.outputs.LIBRARY_ARTIFACT_REPOSITORY_URL }}
      
    steps: 
    - uses: actions/checkout@v2

    - name: Set up JDK ${{ needs.Init.outputs.JAVA_JDK_VERSION }}
      uses: actions/setup-java@v2
      with:
        java-version: '${{ needs.Init.outputs.JAVA_JDK_VERSION }}'
        distribution: '${{ needs.Init.outputs.JAVA_DISTRIBUTION }}'
        cache: 'maven'

    - name: Configure AWS credentials from DevOps account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ needs.Init.outputs.AWS_REGION }}

    - name: Set Up CodeArtifact Token
      run: |         
         echo CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain $AWS_CODEARTIFACT_DOMAIN --domain-owner $AWS_ACCOUNT_ID --query authorizationToken --output text --duration-seconds 900` >> $GITHUB_ENV
    
    - name: Build and Unit Test
      run: |
        echo "++++++++++++++++++++++++++++++++++++++++++++++++++"
        echo "Compiling..."
        echo "++++++++++++++++++++++++++++++++++++++++++++++++++"        
        mvn -B package --file pom.xml -s settings.xml
        echo "++++++++++++++++++++++++++++++++++++++++++++++++++"  

  CD:
    name: Continous Deployment
    needs: [Init, CI]
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged && (github.ref == 'develop' || github.ref == 'staging')) || (github.event_name == 'release' && (startsWith(github.ref, 'refs/tags/v') ||  startsWith(github.ref, 'refs/tags/HOTFIX_')))
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.Init.outputs.ENVIRONMENT_NAME }}
      url: '${{ needs.Init.outputs.DEPLOYMENT_URL }}'
    outputs:
      POM_VERSION: ${{ env.POM_VERSION }}
    env:
      AWS_ACCOUNT_ID: ${{ needs.Init.outputs.AWS_ACCOUNT_ID }}
      AWS_CODEARTIFACT_DOMAIN: ${{ needs.Init.outputs.AWS_CODEARTIFACT_DOMAIN }}
      CODEARTIFACT_AUTH_TOKEN: ${{ needs.CI.outputs.CODEARTIFACT_AUTH_TOKEN }}
      ARTIFACT_REPOSITORY_CENTRAL_NAME: ${{ needs.Init.outputs.ARTIFACT_REPOSITORY_CENTRAL_NAME }}
      ARTIFACT_REPOSITORY_CENTRAL_URL: ${{ needs.Init.outputs.ARTIFACT_REPOSITORY_CENTRAL_URL }}
      LIBRARY_ARTIFACT_REPOSITORY_NAME: ${{ needs.Init.outputs.LIBRARY_ARTIFACT_REPOSITORY_NAME }}
      LIBRARY_ARTIFACT_REPOSITORY_URL: ${{ needs.Init.outputs.LIBRARY_ARTIFACT_REPOSITORY_URL }}
      
    steps: 
    - uses: actions/checkout@v2

    - name: Set up JDK ${{ needs.Init.outputs.JAVA_JDK_VERSION }}
      uses: actions/setup-java@v2
      with:
        java-version: '${{ needs.Init.outputs.JAVA_JDK_VERSION }}'
        distribution: '${{ needs.Init.outputs.JAVA_DISTRIBUTION }}'
        cache: 'maven'

    - name: Configure AWS credentials from DevOps account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ needs.Init.outputs.AWS_REGION }}

    - name: Set Up Pom Variables
      run: |
        ARTIFACT_ID_POM=`grep -oPm1 "(?<=<artifactId>)[^<]+" pom.xml`
        FINAL_NAME_POM=`grep -oPm1 "(?<=<finalName>)[^<]+" pom.xml`
        POM_VERSION=`grep -oPm1 "(?<=<version>)[^<]+" pom.xml`
        ARTIFACT_VERSION=$POM_VERSION
        
        if [ ! -z "${{ needs.Init.outputs.SUFIX_ARTIFACT_VERSION }}" ]
        then
           ARTIFACT_VERSION="$POM_VERSION-${{ needs.Init.outputs.SUFIX_ARTIFACT_VERSION }}"
        fi
        
        echo ARTIFACT_ID_POM=$ARTIFACT_ID_POM >> $GITHUB_ENV
        echo FINAL_NAME_POM=$FINAL_NAME_POM >> $GITHUB_ENV        
        echo ARTIFACT_VERSION=$ARTIFACT_VERSION >> $GITHUB_ENV
        echo POM_VERSION=$POM_VERSION >> $GITHUB_ENV
    
    - name: Packaging Application
      run: |
        mvn -B package --file pom.xml -s settings.xml
    
    - name: Copying AppSpect into Output Directory
      run: |
        echo "Copying appsspect into package folder..."
        cp appspec.yml dist/
        cp -r hooks dist/
        mkdir dist/WAR
        mv -f dist/${{ env.FINAL_NAME_POM }}.war dist/WAR
        
    - name: Uploading Package to S3 Bucket
      run: |
        aws deploy push --application-name ${{ env.FINAL_NAME_POM }} --s3-location s3://${{ needs.Init.outputs.BUCKET_REPOSITORY }}/${{ env.FINAL_NAME_POM }}/${{ needs.Init.outputs.SUFIX_ARTIFACT_VERSION }}/${{ env.ARTIFACT_ID_POM }}-${{ env.POM_VERSION }}.zip --ignore-hidden-files --source dist/
     
    - name: Create CodeDeploy Deployment
      run: |
        aws deploy create-deployment --application-name ${{ env.FINAL_NAME_POM }} --deployment-config-name ${{ needs.Init.outputs.DEPLOYMENT_CONFIG_NAME }} --deployment-group-name ${{ needs.Init.outputs.DEPLOYMENT_GROUP_NAME }} --s3-location bucket=${{ needs.Init.outputs.BUCKET_REPOSITORY }},key=${{ env.FINAL_NAME_POM }}/${{ needs.Init.outputs.SUFIX_ARTIFACT_VERSION }}/${{ env.ARTIFACT_ID_POM }}-${{ env.POM_VERSION }}.zip,bundleType=zip --description "Deployment generated automatically by: ${{ github.actor }}"

  TaggingRepository:
    name: Tagging Release Version into Repository
    needs: [CD]
    if: github.event_name == 'pull_request' && github.ref == 'staging' && github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 
    
      - name: Tagging to Staging Branch        
        run: |
            artifactTag=v${{ needs.CD.outputs.POM_VERSION }}
            echo "Tag Id: $artifactTag"
            messageTag="Tag $artifactTag created automatically new version of product."
            echo "Message Tag: $messageTag"            
            git config --global user.email ""
            git config --global user.name "${{ github.actor }}"
            git tag -a $artifactTag -m "$messageTag"
            git push --tags --progress
            echo "Push created with tag: $artifactTag"
